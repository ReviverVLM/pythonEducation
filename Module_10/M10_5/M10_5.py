"""
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.

Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.

Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.

Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход:
контекстный менеджер with и объект Pool.
Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
Измерьте время выполнения и выведите его в консоль.

Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности,
предварительно закомментировав другой.
"""
import time
import multiprocessing


def read_info(name):
    all_data = []
    with open(name, encoding="UTF-8") as file:
        for line in file:
            all_data.append(line.strip())
    return len(all_data)


files = ["file 1.txt", "file 2.txt", "file 3.txt", "file 4.txt"]

# start_time = time.time()
# for file in files:
#     print(read_info(file))
# print(time.time() - start_time)

start_time_multi = time.time()
if __name__ == '__main__':

    with multiprocessing.Pool(processes=48) as pool:
        print(pool.map(read_info, files))
print(time.time() - start_time_multi)

